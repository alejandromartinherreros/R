#+TITLE:     Clases y Métodos

#+STARTUP: beamer
#+SETUPFILE: config.org
#+OPTIONS: H:3
#+PROPERTY: header-args :results output :exports both :session R:class :tangle yes :comments org

* OOP en R
** Programación Orientada a Objetos (OOP)

*** Programación Orientada a Objetos (OOP)
- Características básicas del paradigma OOP:
  - Los objectos encapsulan información y control de su comportamiento (/objects/).
  - Las clases describen propiedades de un grupo de objetos (/class/).
  - Se pueden definir clases a partir de otras (/inheritance/).
  - Una función genérica se comporta de forma diferente atendiendo a la
    clase de uno (o varios) de sus argumentos (/polymorphism/).
- En =R= coexisten dos implementaciones de la OOP:
  - =S3=: elaboración informal con enfasis en las funciones genéricas y el polimorfismo.
  - =S4=: elaboración formal de clases y métodos.
*** OOP en R
**** Referencias 						    :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
#+BEGIN_CENTER
- [[http://www.springer.com/gb/book/9780387759357][Software for Data Analysis]] 
- [[http://developer.r-project.org/howMethodsWork.pdf][How Methods Work]]
- [[http://www.stat.auckland.ac.nz/S-Workshop/Gentleman/S4Objects.pdf][S4 classes in 15 pages]]
- [[http://bioconductor.org/help/publications/books/r-programming-for-bioinformatics/][R Programming for Bioinformatics ]]
- [[http://bioconductor.org/help/course-materials/2010/AdvancedR/S4InBioconductor.pdf][S4 System Development in Bioconductor]]
#+END_CENTER

* Clases y métodos S3

** Clases
*** Clases
Los objetos básicos en =R= tienen una clase implícita definida en =S3=. Es accesible con =class=.
#+begin_src R
  x <- rnorm(10)
  class(x)
#+end_src
Pero no tienen atributo ni se consideran formalmente objetos:
#+begin_src R
attr(x, 'class')
#+end_src
#+begin_src R
is.object(x)
#+end_src


*** Clases
Se puede redefinir la clase de un objecto =S3= con =class=
#+begin_src R
  class(x) <- 'myNumeric'
  class(x)
#+end_src
Ahora sí es un objeto y su atributo está definido:
#+begin_src R
attr(x, 'class')
#+end_src
#+begin_src R
is.object(x)
#+end_src
Sin embargo, su modo de almacenamiento (clase intrínseca) no cambia:
#+begin_src R
  mode(x)
#+end_src

*** Definición de Clases 
#+begin_src R
  task1 <- list(what='Write an email',
                when=as.Date('2013-01-01'),
                priority='Low')
  class(task1) <- 'Task'
  task1
#+end_src
#+begin_src R
  task2 <- list(what='Find and fix bugs',
                when=as.Date('2013-03-15'),
                priority='High')
  class(task2) <- 'Task'
#+end_src

*** Definición de Clases
#+begin_src R
  myToDo <- list(task1, task2)
  class(myToDo) <- c('ToDo3')
  myToDo
#+end_src

# ** Herencia entre clases
# #+begin_src R
#   inherits(myToDo, 'Task')
# #+end_src

# - Atención: cuando un vector se transforma en matriz no hereda =numeric=:
# #+begin_src R
#   x <- rnorm(10)
#   x <- matrix(x, nrow=2)
#   inherits(x, 'numeric')
# #+end_src

** Métodos
*** Métodos con =S3=

- Sencillos de usar e implementar.
- Poco robustos.
- Se definen a partir de un método genérico, añadiendo a la función el nombre de la clase con un punto como separador. 
  - =print= :: =print.data.frame=
  - =summary= :: =summary.lm=
		 
*** Métodos genéricos: =UseMethod=
- =UseMethod= sirve para elegir el método correspondiente a la clase
  del objeto empleado como argumento en la función.

- Se debe definir un método genérico, incluyendo llamada a
  =UseMethod=.
#+begin_src R
summary
#+end_src

- Si no hay un método definido para la clase del objeto, =UseMethod= ejecuta la función por defecto:
#+begin_src R
summary.default
#+end_src

*** Métodos genéricos: =UseMethod=

#+begin_src R
  myFun <- function(x, ...)UseMethod('myFun')
  myFun.default <- function(x, ...){
    cat('Funcion genérica\n')
    print(x)
    }
#+end_src

#+begin_src R
x <- rnorm(10)
myFun(x)
#+end_src

#+begin_src R
myFun(task1)
#+end_src

*** =methods=
Con =methods= podemos averiguar los métodos que hay definidos para una función particular:
#+begin_src R
methods('myFun')
#+end_src
#+begin_src R
methods('summary')
#+end_src

*** Definición del método para =Task=
#+begin_src R
myFun.Task <- function(x, number,...)
{
    if (!missing(number))
        cat('Task no.', number,':\n')
    cat('What: ', x$what,
        '- When:', as.character(x$when),
        '- Priority:', x$priority,
        '\n')
}
#+end_src
#+begin_src R
myFun(task1)
#+end_src
#+begin_src R
methods(myFun)
#+end_src
#+begin_src R
methods(class='Task')
#+end_src


*** =NextMethod=
Incluyendo =NextMethod= en un método específico llamamos al método genérico (=default=).
#+begin_src R
  print.Task <- function(x, ...){
    cat('Task:\n')
    NextMethod(x, ...) ## Ejecuta print.default
  }
#+end_src
#+begin_src R
  print(task1)
#+end_src

*** =NextMethod=
#+begin_src R
  print.ToDo3 <- function(x, ...){
    cat('This is my ToDo list:\n')
    NextMethod(x, ...)
    cat('--------------------\n')
  }
#+end_src
#+begin_src R
print(myToDo)
#+end_src

*** Definición de un método =S3= para =Task=
#+begin_src R
print.Task <- function(x, number,...){
    if (!missing(number))
        cat('Task no.', number,':\n')
    cat('What: ', x$what,
        '- When:', as.character(x$when),
        '- Priority:', x$priority,
        '\n')
} 
#+end_src
#+begin_src R
print(task1)
#+end_src
#+begin_src R
print(myToDo[[2]])
#+end_src


*** Definición de un método =S3= para =ToDo3=
- Definimos un método más sofisticado para la clase =ToDo3= *sin*
  tener en cuenta el método definido para la clase =Task=.
#+begin_src R
  print.ToDo3 <- function(x, ...){
    cat('This is my ToDo list:\n')
    for (i in seq_along(x)){
      cat('Task no.', i,':\n')
      cat('What: ', x[[i]]$what,
          '- When:', as.character(x[[i]]$when),
          '- Priority:', x[[i]]$priority,
          '\n')
      }
    cat('--------------------\n')
  }
#+end_src
#+begin_src R
  print(myToDo)
#+end_src

*** Redefinición del método para =ToDo3=

- Podemos aligerar el código teniendo en cuenta el método definido para la clase =Task=.
#+begin_src R
  print.ToDo3 <- function(x, ...){
      cat('This is my ToDo list:\n')
      ## Cada uno de los elementos de un
      ## objeto ToDo3 son Task.  Por tanto,
      ## x[[i]] es de clase Task y
      ## print(x[[i]]) ejecuta el metodo
      ## print.Task
    for (i in seq_along(x)) print(x[[i]], i)
      cat('--------------------\n')
  }
#+end_src
#+begin_src R
print(myToDo)
#+end_src

* Clases y métodos S4

** Clases en =S4=
*** Clases en =S4=
Se construyen con =setClass=, que acepta varios argumentos
  - =Class=: nombre de la clase.
  - =slots=: una lista con las clases de cada componente. Los nombres de este vector corresponden a los nombres de los componentes (=slot=).
  - =contains=: un vector con las clases que esta nueva clase extiende.
  - =prototype=: un objeto proporcionando el contenido por defecto para los componentes definidos en =slots=.
  - =validity=: a función que comprueba la validez de la clase creada con la información suministrada.

*** Datos de ejemplo
Vamos a ilustrar esta sección con datos de seguimiento GPS de gaviotas[fn:1] empleando un extracto del conjunto de datos[fn:2].
#+ATTR_LATEX: :height 0.5\textheight
[[file:figs/73915_lesser-black-backed-gull-with-transmitter.jpg]]

*** Definición de una nueva clase

#+begin_src R
setClass('bird',
         slots = c(
             name = 'character',
             lat = 'numeric',
             lon = 'numeric',
             alt = 'numeric',
             speed = 'numeric',
             time = 'POSIXct')
         )
#+end_src
*** Funciones para obtener información de una clase
#+begin_src R
getClass('bird')
#+end_src
#+begin_src R
getSlots('bird')
#+end_src
#+begin_src R
slotNames('bird')
#+end_src

*** Creación de un objeto con la clase definida
Una vez que la clase ha sido definida con =setClass=, se puede crear un objeto nuevo con =new=. Es habitual definir funciones que construyen y modifican objetos para evitar el uso directo de =new=:
#+begin_src R
readBird <- function(name, path)
{
    csvFile <- file.path(path, paste0(name, ".csv"))

    vals <- read.csv(csvFile)
    
    new('bird',
        name = name,
        lat = vals$latitude,
        lon = vals$longitude,
        alt = vals$altitude,
        speed = vals$speed_2d,
        time = as.POSIXct(vals$date_time)
        )
}  
#+end_src

*** Creación de objetos con la clase definida
#+begin_src R
eric <- readBird("eric", "data")
nico <- readBird("nico", "data")
sanne <- readBird("sanne", "data")
#+end_src


*** Acceso a los slots
A diferencia de =$= en listas y =data.frame=, para extraer información de los /slots/ hay que emplear =@= (pero no es recomendable):
#+begin_src R 
eric@name
#+end_src

#+begin_src R
summary(eric@speed)
#+end_src

*** Clases =S4= con slots tipo lista
#+begin_src R
setClass("flock",
         slots = c(
             name = "character",
             members = "list")
         )

#+end_src

#+begin_src R
notAFlock <- new("flock",
                 name = "flock0",
                 members = list(eric,
                                3,
                                "hello"))
sapply(notAFlock@members, class)
#+end_src

*** Función de validación
#+begin_src R
valida <- function (object) {
    if (any(sapply(object@members,
                   function(x) !is(x, "bird")))) 
        stop("only bird objects are accepted.")
    return(TRUE)
}

setClass("flock",
         slots = c(
             name = "character",
             members = "list"),
         validity = valida
         )
#+end_src

*** Ejemplo de objeto =S4= con slot tipo =list=
#+begin_src R
newFlock <- function(name, ...){
    birds <- list(...)
    new("flock",
        name = name,
        members = birds)
}
#+end_src

#+begin_src R
notAFlock <- newFlock("flock0",
                    eric, 2, "hello")
#+end_src

#+begin_src R
myFlock <- newFlock("flock1",
                    eric, nico, sanne)
#+end_src
** Métodos en =S4=

*** Métodos en =S4=: =setMethod=
- Normalmente se definen con =setMethod= suministrando:
  - la clase de los objetos para /esta/ definición del
    método (=signature=)
  - la función a ejecutar (=definition=).
#+begin_src R
setMethod('show',
          signature = "bird",
          definition = function(object)
          {
              cat("Name: ", object@name, "\n")
              cat("Latitude: ", summary(object@lat), "\n")
              cat("Longitude: ", summary(object@lon), "\n")
              cat("Speed: ", summary(object@speed), "\n")
          })
#+end_src
#+begin_src R
eric
#+end_src

*** Métodos en =S4=: =setMethod=
#+begin_src R
setMethod('show',
          signature = "flock",
          definition = function(object)
          {
              cat("Flock Name: ", object@name, "\n")
              N <- length(object@members)
              lapply(seq_len(N), function(i)
              {
                  cat("Bird #", i, "\n")
                  print(object@members[[i]])
              })
          })
#+end_src

#+begin_src R
myFlock
#+end_src

*** Métodos en =S4=: =setGeneric=
- Es necesario que exista un método genérico ya definido.
#+begin_src R
isGeneric("as.data.frame")
#+end_src
- Si no existe, se define con =setGeneric= (y quizás =standardGeneric=).
#+begin_src R
setGeneric("as.data.frame")
#+end_src
- La función =definition= debe respetar los argumentos de la función genérica y en el mismo orden.
#+begin_src R
getGeneric("as.data.frame")
#+end_src


*** Métodos en =S4=: ejemplo con =as.data.frame=
#+begin_src R
setMethod("as.data.frame",
          signature = "bird",
          definition = function(x, ...)
          {
              data.frame(
                  name = x@name,
                  lat = x@lat,
                  lon = x@lon,
                  alt = x@alt,
                  speed = x@speed,
                  time = x@time)
          })
#+end_src

#+begin_src R
ericDF <- as.data.frame(eric)
#+end_src

*** Métodos en =S4=: ejemplo con =as.data.frame=

**** Ejercicio
Define un método de =as.data.frame= para la clase =flock= a partir del método para la clase =bird=.

*** Métodos en =S4=: ejemplo con =as.data.frame=
#+begin_src R
setMethod("as.data.frame",
          signature = "flock",
          definition = function(x, ...)
          {
              dfs <- lapply(x@members, as.data.frame)
              dfs <- do.call(rbind, dfs)
              dfs$flock_name <- x@name
              dfs
          })
#+end_src

#+begin_src R
flockDF <- as.data.frame(myFlock)
#+end_src

*** Métodos en =S4=: ejemplo con =xyplot=
#+begin_src R
library(lattice)

setGeneric("xyplot")

setMethod('xyplot',
          signature = "bird",
          definition = function(x, data = NULL, ...)
          {
              df <- as.data.frame(x)
              xyplot(lat ~ lon, data = df, ...)
          })    
#+end_src

#+begin_src R
xyplot(eric)
#+end_src


*** Métodos en =S4=: ejemplo con =xyplot=
**** Ejercicio
Define un método de =xyplot= para la clase =bird= que permita elegir entre diferentes modos de representación:
- =lontime=
- =lattime=
- =latlon=
- =speed=

*** Métodos en =S4=: ejemplo con =xyplot=

#+begin_src R
setMethod('xyplot',
          signature = "bird",
          definition = function(x, data = NULL,
                                mode = "latlon", ...)
          {
              df <- as.data.frame(x)
              switch(mode,
                     lontime = xyplot(lon ~ time, data = df, ...),
                     lattime = xyplot(lat ~ time, data = df, ...),
                     latlon = xyplot(lat ~ lon, data = df, ...),
                     speed = xyplot(speed ~ time, data = df, ...)
                     )
          })    
#+end_src

#+begin_src R
xyplot(eric, mode = "lontime")
#+end_src

*** Métodos en =S4=: ejemplo con =xyplot=
**** Ejercicio
Define un método de =xyplot= para la clase =flock= usando el color para distinguir a los diferentes integrantes (argumento =group= en =xyplot=).

*** Métodos en =S4=: ejemplo con =xyplot=

#+begin_src R
setMethod('xyplot',
          signature = "flock",
          definition = function(x, data = NULL, ...)
          {
              df <- as.data.frame(x)
              xyplot(lon ~ lat,
                     group = name,
                     data = df,
                     auto.key = list(space = "right"))
              })
#+end_src

#+begin_src R
xyplot(myFlock)
#+end_src
** Clases =S3= con clases y métodos =S4=

*** Clases =S3= con clases y métodos =S4=
Para usar objetos de clase =S3= en =signatures= de métodos =S4= o
como contenido de =slots= de una clase =S4= hay que registrarlos con
=setOldClass=:
#+begin_src R
setOldClass('lm')
#+end_src

#+begin_src R 
getClass('lm')
#+end_src

*** Ejemplo con =lm= y =xyplot=
Definimos un método genérico para =xyplot=
#+begin_src R
library(lattice)
setGeneric('xyplot')
#+end_src
Definimos un método para la clase =lm= usando =xyplot=.
#+begin_src R
setMethod('xyplot',
          signature = c(x = 'lm',
                        data = 'missing'),
          definition = function(x, data,
                                ...)
          {
              fitted <- fitted(x)
              residuals <- residuals(x)
              xyplot(residuals ~ fitted,...)
          })

#+end_src

*** Ejemplo con =lm= y =xyplot=
Recuperamos la regresión que empleamos en el apartado de Estadística:
#+begin_src R
lmFertEdu <- lm(Fertility ~ Education, data = swiss)
summary(lmFertEdu)
#+end_src


*** Ejemplo con =lm= y =xyplot=

#+begin_src R :exports both :results output graphics :file figs/xyplotS4.pdf
xyplot(lmFertEdu, col='red', pch = 19,
       type = c('p', 'g'))
#+end_src
#+ATTR_LaTeX: :height 0.7\textheight
#+RESULTS:
[[file:figs/xyplotS4.pdf]]

#+begin_src R :exports none :tangle no
remove(print.Task, print.ToDo3, myFun, myFun.default, myFun.Task)
removeMethod("show", 'bird')
removeGeneric("as.data.frame")
removeMethod("as.data.frame", 'bird')
removeMethod("xyplot", 'bird')
removeMethod("xyplot", 'flock')
#+end_src

* Footnotes

[fn:2]https://lifewatch.inbo.be/blog/files/bird_tracking.zip 

[fn:1] https://lifewatch.inbo.be/blog/posts/bird-tracking-data-published.html
