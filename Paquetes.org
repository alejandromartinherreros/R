#+TITLE:     Crear paquetes en R

#+SETUPFILE: config.org
#+OPTIONS: H:2


* Introducción

** Definiciones previas ([[http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf][Creating R Packages: a tutorial]])
- *Package*: An extension of the R base system with code, data and
  documentation in standardized format.
- *Library*: A directory containing installed packages.
- *Repository*: A website providing packages for installation.

** Definiciones previas ([[http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf][Creating R Packages: a tutorial]])
- *Source*: The original version of a package with human-readable text and code.
- *Binary*: A compiled version of a package with computer-readable
  text and code, may work only on a specific platform.

** Definiciones previas ([[http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf][Creating R Packages: a tutorial]])
- *Base packages*: Part of the R source tree, maintained by R Core.
- *Recommended packages*: Part of every R installation, but not
  necessarily maintained by R Core.
- *Contributed packages*: All the rest. 

** ¿Por qué crear y publicar un paquete para =R=?

*** Organización
 - Es una herramienta cómoda para mantener *colecciones coherentes de funciones y datos*.
 - La estructura de un paquete *obliga a organizar, limpiar y documentar* el código.

** ¿Por qué crear y publicar un paquete para =R=?

*** Colaboración
 - Permite publicar código de forma que pueda ser *empleado por otros* siguiendo unas *estructuras comunes*.
 - Al distribuir las herramientas para que otros puedan usarlas, se obtiene *realimentación sobre lo publicado*, de forma que se aumenta su *robustez*, se *amplian sus funcionalidades* y se *conecta con otras herramientas* y proyectos.

** ¿Por qué crear y publicar un paquete para =R=?

*** Ética
"As we enjoy great advantages from the inventions of others, we should be glad of an opportunity to serve others by any invention of ours, and this we should do freely and generously." (B. Franklin)

** Algunos consejos genéricos

Extraído de [[http://arxiv.org/abs/1210.0530][Best Practices for Scientific Computing]]

- Write programs for people, not computers.
- Automate repetitive tasks
- Use the computer to record history
- Make incremental changes
- Use version control
- Don't repeat yourself (or others)
- Plan for mistakes
- Optimize software only after it works correctly
- Document design and purpose, not mechanics
- Collaborate

** 
*** Referencias							    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
- [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html][Writing R Extensions]]
- [[http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf][Creating R Packages: a tutorial]]
- [[http://kbroman.org/pkg_primer/][R package primer]]
- [[http://portal.stats.ox.ac.uk/userdata/ruth/APTS2012/Rcourse10.pdf][Making an R package]]

* Crear un paquete en R

** Estructura
Las fuentes de un paquete de =R= están contenidas en un directorio que contiene al menos:
  - Los ficheros DESCRIPTION y NAMESPACE
  - Los subdirectorios:
    - =R=: código en ficheros .R
    - =man=: páginas de ayuda de las funciones, métodos y clases
      contenidos en el paquete.
Esta estructura puede ser generada con =package.skeleton=

** DESCRIPTION
El fichero DESCRIPTION contiene la información básica:
#+begin_example
     Package: pkgname
     Version: 0.5-1
     Date: 2004-01-01
     Title: My First Collection of Functions
     Authors@R: c(person("Joe", "Developer", role = c("aut", "cre"),
                          email = "Joe.Developer@some.domain.net"),
                   person("Pat", "Developer", role = "aut"),
                   person("A.", "User", role = "ctb",
     	             email = "A.User@whereever.net"))
     Author: Joe Developer and Pat Developer, with contributions from A. User
     Maintainer: Joe Developer <Joe.Developer@some.domain.net>
     Depends: R (>= 1.8.0), nlme
     Suggests: MASS
     Description: A short (one paragraph) description of what
       the package does and why it may be useful.
     License: GPL (>= 2)
     URL: http://www.r-project.org, http://www.another.url
#+end_example
- Los campos =Package=, =Version=, =License=, =Title=, =Author= y
  =Maintainer= son obligatorios.
- Si usa métodos =S4= debe incluir =Depends: methods=
** NAMESPACE
- =R= usa un sistema de gestión de *espacio de nombres* que
  permite al autor del paquete especificar:
  - las *variables* del paquete que se *exportan* (y son, por tanto,
    accesibles a los usuarios)
  - las *variables* que se *importan* de otros paquetes.
  - las *clases y métodos* =S3= y =S4= que deben registrarse.
- Este mecanismo queda definido en el contenido del fichero
  =NAMESPACE=.
** NAMESPACE
El =NAMESPACE= controla la estrategia de búsqueda de variables
  que utilizan las funciones del paquete:
  1. En primer lugar busca entre las creadas localmente (por el código de la carpeta =R/=).
  2. En segundo lugar busca entre las variables importadas
    explícitamente de otros paquetes.
  3. En tercer lugar busca en el =NAMESPACE= del paquete =base=.
  4. Por último busca siguiendo el camino habitual (ver el
    resultado de =search()=)

** NAMESPACE: variables
- Para exportar las variables =f= y =g=:
#+begin_src R 
export(f, g)
#+end_src
- Para importar *todas* las variables del paquete =pkgExt=:
#+begin_src R 
import(pkgExt)
#+end_src
- Para importar las variables =var1= y =var2= del paquete
  =pkgExt=:
#+begin_src R 
importFrom(pkgExt, var1, var2)
#+end_src

** NAMESPACE: clases y métodos
- Para registrar el método =S3= =print= para la clase =myClass=:
#+begin_src R 
S3method(print, myClass)
#+end_src
- Para usar clases y métodos =S4=
#+begin_src R
import("methods")
#+end_src
- Para registrar las clases =S4= =class1= y =class2=:
#+begin_src R 
exportClasses(class1, class2)
#+end_src
- Para registrar los métodos =S4= =method1= y =method2=:
#+begin_src R 
exportMethods(method1, method2)
#+end_src
- Para importar métodos y clases =S4= de otro paquete:
#+begin_src R 
importClassesFrom(package, ...)
importMethodsFrom(package, ...)
#+end_src

** Documentación 
- Las páginas de ayuda de los objetos =R= se escriben usando el
  formato “R documentation” (Rd), un lenguaje similar a LaTeX.
- Es aconsejable seguir estas orientaciones: [[http://developer.r-project.org/Rds.html][Guidelines for Rd files]]
- Para generar el esqueleto de un fichero Rd es aconsejable usar:
  - =prompt=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-functions][genérica]]
  - =promptClass= y =promptMethods=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-S4-classes-and-methods][clases y métodos]].
  - =promptPackage=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-packages][paquete]]
  - =promptData=: [[http://cran.r-project.org/doc/manuals/r-release/R-exts.html#Documenting-data-sets][datos]]
- Todos los comandos disponibles están en el documento [[http://developer.r-project.org/parseRd.pdf][Parsing Rd files]].

** 
#+begin_example
  \name{load}
  \alias{load}
  \title{Reload Saved Datasets}
  \description{
    Reload the datasets written to a file with the function
    \code{save}.
  }
  \usage{
    load(file, envir = parent.frame())
  }
  \arguments{
  \item{file}{a connection or a character string giving the
      name of the file to load.}
  \item{envir}{the environment where the data should be
      loaded.}
  }
  \seealso{
    \code{\link{save}}.
  }
  \examples{
    ## save all data
    save(list = ls(), file= "all.RData")
    
    ## restore the saved values to the current environment
    load("all.RData")
    
    ## restore the saved values to the workspace
    load("all.RData", .GlobalEnv)
  }
  \keyword{file}
#+end_example

** Ejemplos

- Paquete simple: https://github.com/oscarperpinan/pkgEx
- Paquete con métodos S4: https://github.com/oscarperpinan/birds

* Publicar un paquete

** Itinerario
1. Comprobar
   #+begin_src sh
R CMD check myPackage/
#+end_src
2. Construir
   #+begin_src sh
R CMD build myPackage/
#+end_src
3. Publicar (o actualizar) en un repositorio

** Comprobar
- Comprobar un directorio (desde línea de comandos):
#+begin_src sh
R CMD check myPackage/
#+end_src
- Comprobar un paquete ya construido (desde línea de comandos):
#+begin_src sh
R CMD check myPackage.tar.gz
#+end_src
- Esta comprobación incluye más de 20 puntos de prueba detallados
  en el manual [[http://cran.r-project.org/doc/manuals/R-exts.html#Checking-packages][Writing R extensions]].
** Construir
*** Fuente o binario						    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    Se puede construir un fichero fuente en formato /tarball/
    (independiente de la plataforma, habitual en sistemas Unix) o en
    forma binaria (dependiente de la plataforma, habitual para Windows y Mac).
*** Cómo hacerlo					    :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
- Fuente en formato /tarball/: el resultado es un fichero /tarball/ =myPackage.tar.gz= que
     se puede distribuir a cualquier sistema.
#+begin_src sh
R CMD build myPackage/
#+end_src

- Comprimido binario: el resultado es una copia comprimida de la versión
     *instalada* del paquete: depende del sistema operativo.
#+begin_src sh
R CMD INSTALL --build myPackage/
#+end_src


** Comprobar y construir en sistemas Windows

- Para paquetes sin código compilado (C, Fortran), también se puede usar
  =R CMD check= y =R CMD build= en un sistema Windows.
- Para generar un binario hay que usar =R CMD INSTALL --build=.
  - Es posible que haya que modificar la variables de entorno
    =TEMP= y =TMP= de forma que *sólo* contengan caracteres ASCII.
- Para paquetes con código compilado, o en caso de problemas con
  los comandos anteriores, hay que usar [[http://cran.r-project.org/bin/windows/Rtools/][Rtools]].
- Se pueden instalar fuentes /tarball/ con (ver [[http://cran.r-project.org/doc/manuals/R-admin.html#Windows-packages][R installation and administration]]):
#+begin_src sh
install.packages(myPackage.tar.gz, type='source')
#+end_src


** Repositorios: CRAN
El principal repositorio de paquetes estables es [[http://cran.r-project.org/][CRAN]].
  - Publicar en este repositorio conlleva la aceptación de unas [[http://cran.r-project.org/web/packages/policies.html][condiciones]].
  - Para publicar en CRAN hay que subir el fichero fuente /tarball/
    resultado de =R CMD build= mediante el formulario web
    https://cran.r-project.org/submit.html siguiendo los pasos que
    allí se indican.
  - Es imprescindible haber comprobado el fichero con =R CMD check
    --as-cran= antes de subirlo al formulario. El resultado de
    esta comprobación *no* debe contener errores, advertencias o notas.
  - Más detalle en el apartado /Submission/ de las [[http://cran.r-project.org/web/packages/policies.html][condiciones de
    CRAN]].

** Repositorios

Otros repositorios destacables son:

  - [[https://github.com/][GitHub]] (versiones de desarrollo)

  - [[http://r-forge.r-project.org/][R-Forge]] (versiones de desarrollo)

  - [[http://rforge.net/][RForge]] (versiones de desarrollo)

  - [[http://www.bioconductor.org/][Bioconductor]] (paquetes de bioinformática)

** Repositorios: GitHub

- GitHub es actualmente el repositorio de código más importante por número de usuarios y proyectos alojados.
  - Documentación: [[https://guides.github.com/][Guías sobre GitHub]].
  - Existe una [[https://desktop.github.com/][aplicación de escritorio]].
- Emplea =git= para realizar control de versiones.
  - [[https://help.github.com/articles/good-resources-for-learning-git-and-github/][Recursos]] para aprender a usar =git=.
- [[https://github.com/search?o=desc&q=language:R&ref=searchresults&s=stars&type=Repositories][Proyectos de =R= en GitHub]]. 
- Instalar paquete desde GitHub:
#+begin_src R
install.packages('remotes') ## solo primera vez
library(remotes)
## https://github.com/oscarperpinan/tdr
install_github("oscarperpinan/tdr") 
#+end_src

