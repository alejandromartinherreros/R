#+TITLE:     Funciones

#+SETUPFILE: config.org
#+OPTIONS: H:2
#+PROPERTY: header-args :results output :exports both :session R:funciones :tangle yes :comments org
#+LATEX_HEADER: \AtBeginSection[]{\begin{frame}[plain]\tableofcontents[currentsection,sectionstyle=show/shaded]\end{frame}}


* Conceptos Básicos

** Fuentes de información
- [[http://cran.r-project.org/doc/manuals/R-intro.html][R introduction]]
- [[http://cran.r-project.org/doc/manuals/R-lang.html][R Language Definition]]
- [[http://www.springer.com/gb/book/9780387759357][Software for Data Analysis]]
** Componentes de una función
- Una función se define con =function=
#+BEGIN_CENTER
=name <- function(arg_1, arg_2, ...) expression=
#+END_CENTER
- Está compuesta por:
  - Nombre de la función (=name=)
  - Argumentos (=arg_1=, =arg_2=, =...=)
  - Cuerpo (=expression=): emplea los argumentos para generar un resultado
** Mi primera función
- Definición
#+begin_src R 
myFun <- function(x, y)
{
    x + y
}
#+end_src
- Argumentos
#+begin_src R 
formals(myFun)
#+end_src
- Cuerpo
#+begin_src R 
body(myFun)
#+end_src

** Mi primera función
#+begin_src R 
myFun(1, 2)
#+end_src
#+begin_src R 
myFun(1:10, 21:30)
#+end_src
#+begin_src R 
myFun(1:10, 3)
#+end_src

** Argumentos: nombre y orden

Una función identifica sus argumentos por su nombre y por su orden (sin nombre)

#+begin_src R 
power <- function(x, exp)
{
    x^exp
}
#+end_src

#+begin_src R 
power(x=1:10, exp=2)
#+end_src

#+begin_src R 
power(1:10, exp=2)
#+end_src

#+begin_src R 
power(exp=2, x=1:10)
#+end_src

** Argumentos: valores por defecto
- Se puede asignar un valor por defecto a los argumentos
#+begin_src R 
power <- function(x, exp = 2)
{
    x ^ exp
}
#+end_src
#+begin_src R 
power(1:10)
#+end_src
#+begin_src R 
power(1:10, 2)
#+end_src

** Funciones sin argumentos
#+begin_src R 
hello <- function()
{
    print('Hello world!')
}
#+end_src 
#+begin_src R 
hello()
#+end_src

** Argumentos sin nombre: =...=
#+begin_src R 
pwrSum <- function(x, power, ...)
{
    sum(x ^ power, ...)
}
#+end_src
#+begin_src R 
x <- 1:10
pwrSum(x, 2)
#+end_src
#+begin_src R 
x <- c(1:5, NA, 6:9, NA, 10)
pwrSum(x, 2)
#+end_src
#+begin_src R 
pwrSum(x, 2, na.rm=TRUE)
#+end_src

** Argumentos ausentes: =missing=
#+begin_src R 
suma10 <- function(x, y)
{
    if (missing(y)) y <- 10
    x + y
}
#+end_src
#+begin_src R 
suma10(1:10)
#+end_src

** Control de errores: =stopifnot=
#+begin_src R 
foo <- function(x, y)
{
    stopifnot(is.numeric(x) & is.numeric(y))
    x + y
}
#+end_src

#+begin_src R 
foo(1:10, 21:30)
#+end_src

#+begin_src R 
foo(1:10, 'a')
#+end_src

** Control de errores: =stop=
#+begin_src R 
foo <- function(x, y){
    if (!(is.numeric(x) & is.numeric(y))){
        stop('arguments must be numeric.')
    } else { x + y }
} 
#+end_src
#+begin_src R 
foo(2, 3)
#+end_src
#+begin_src R 
foo(2, 'a')
#+end_src

** Mensajes para el usuario
=stop= para la ejecución y emite un mensaje de error
#+begin_src R
stop('Algo no ha ido bien.')
#+end_src
=warning= no interfiere en la ejecución pero añade un mensaje a la cola de advertencias
#+begin_src R
warning('Quizás algo no es como debiera...')
#+end_src
=message= emite un mensaje (*no usar =cat= o =print=*)
#+begin_src R
message('Todo en orden por estos lares.')
#+end_src


* Lexical scope

** Clases de variables
Las variables que se emplean en el cuerpo de una función pueden
dividirse en:
  - Parámetros formales (argumentos): =x=, =y=
  - Variables locales (definiciones internas): =z=, =w=, =m=
  - Variables libres: =a=, =b=
#+begin_src R 
myFun <- function(x, y){
    z <- x^2
    w <- y^3
    m <- a*z + b*w
    m
}
#+end_src
#+begin_src R 
a <- 10
b <- 20
myFun(2, 3)
#+end_src

** Lexical scope

- Las variables libres deben estar disponibles en el entorno
  (=environment=) en el que la función ha sido creada.
#+begin_src R 
environment(myFun) 
#+end_src
#+begin_src R 
ls()
#+end_src

** Lexical scope: funciones anidadas
#+begin_src R 
anidada <- function(x, y){
    xn <- 2
    yn <- 3
    interna <- function(x, y)
    {
        sum(x^xn, y^yn)
    }
    print(environment(interna))
    interna(x, y)
}
#+end_src

#+begin_src R 
anidada(1:3, 2:4)
#+end_src

#+begin_src R 
sum((1:3)^2, (2:4)^3)
#+end_src
** Lexical scope: funciones anidadas
#+begin_src R 
xn
#+end_src

#+begin_src R 
yn
#+end_src

#+begin_src R 
interna
#+end_src

** Funciones que devuelven funciones
#+begin_src R 
constructor <- function(m, n){
    function(x)
    {
        m*x + n
    }
}
#+end_src

#+begin_src R 
myFoo <- constructor(10, 3)
myFoo
#+end_src

#+begin_src R
## 10*5 + 3
myFoo(5)
#+end_src
** Funciones que devuelven funciones
#+begin_src R 
class(myFoo)
#+end_src
#+begin_src R 
environment(myFoo)
#+end_src
#+begin_src R 
ls()
#+end_src
#+begin_src R 
ls(env = environment(myFoo))
#+end_src
#+begin_src R 
get('m', env = environment(myFoo))
#+end_src
#+begin_src R 
get('n', env = environment(myFoo))
#+end_src

* Funciones para ejecutar funciones
** =lapply=
Supongamos que tenemos una lista de objetos, y queremos aplicar a cada elemento la misma función:
#+begin_src R
lista <- list(a = rnorm(100),
              b = runif(100),
              c = rexp(100))
#+end_src
Podemos resolverlo de forma repetitiva...
#+begin_src R
sum(lista$a)

sum(lista$b)

sum(lista$c)
#+end_src

O mejor con =lapply= (lista + función):
#+begin_src R
lapply(lista, sum)
#+end_src

** =do.call=
Supongamos que queremos usar los elementos de la lista como argumentos de una función.

Resolvemos de forma directa:
#+begin_src R
sum(lista$a, lista$b, lista$c)
#+end_src
Mejoramos /un poco/ con =with=:
#+begin_src R
with(lista, sum(a, b, c))
#+end_src
La forma recomendable es mediante =do.call= (función + lista)
#+begin_src R 
do.call(sum, lista)
#+end_src
** =do.call=

Se emplea frecuentemente para adecuar el resultado de =lapply= (entrega una lista):
#+begin_src R 
  x <- rnorm(5)
  ll <- lapply(1:5, function(i)x^i)
  do.call(rbind, ll)
#+end_src

** =Reduce=
Combina sucesivamente los elementos de un objeto aplicando una función binaria
#+begin_src R 
## (((1+2)+3)+4)+5
Reduce('+', 1:5)
#+end_src
** =Reduce=
#+begin_src R 
## (((1/2)/3)/4)/5
Reduce('/', 1:5)
#+end_src

#+begin_src R 
foo <- function(u, v)u + 1 /v
Reduce(foo, c(3, 7, 15, 1, 292))
## equivalente a
## foo(foo(foo(foo(3, 7), 15), 1), 292)
#+end_src
#+begin_src R
Reduce(foo, c(3, 7, 15, 1, 292), right=TRUE)
## equivalente a
## foo(3, foo(7, foo(15, foo(1, 292))))
#+end_src
** Funciones recursivas
Ejemplo: [[http://en.wikibooks.org/wiki/R_Programming/Working_with_functions#Functions_as_Objects][Serie de Fibonnaci]]
#+begin_src R 
fib <- function(n){
    if (n>2) {
        c(fib(n-1),
          sum(tail(fib(n-1),2)))
    } else if (n>=0) rep(1,n)
}
#+end_src
#+begin_src R 
fib(10)
#+end_src

* Debug

** Post-mortem: =traceback=
#+begin_src R 
sumSq <- function(x, ...)
    sum(x ^ 2, ...)

sumProd <- function(x, y, ...){
    xs <- sumSq(x, ...)
    ys <- sumSq(y, ...)
    xs * ys
}
#+end_src
#+begin_src R 
sumProd(rnorm(10), runif(10))
#+end_src
#+begin_src R 
sumProd(rnorm(10), letters[1:10])
#+end_src
#+begin_src R 
traceback()
#+end_src

** Analizar antes de que ocurra: =debug=
=debug= activa la ejecución paso a paso de una función:
#+begin_src R
debug(sumProd)
#+end_src
- Cada vez que se llame a la función, su cuerpo se ejecuta línea a línea y los resultados de cada paso pueden ser inspeccionados.
- Los comandos disponibles son:
  - =n= o intro: avanzar un paso.
  - =c=: continua hasta el final del contexto actual (por ejemplo,
    terminar un bucle).
  - =where=: entrega la lista de todas las llamadas activas.
  - =Q=: termina la inspección y vuelve al nivel superior.
- Para desactivar el análisis:
#+begin_src R
undebug(sumProd)
#+end_src

** /Debugging/ con RStudio
  - [[https://support.rstudio.com/hc/en-us/articles/205612627-Debugging-with-RStudio][Artículo]]
  - [[https://vimeo.com/99375765https://vimeo.com/97831988][Vídeo]]
- [[http://adv-r.had.co.nz/Exceptions-Debugging.html][/Debugging/ explicado por H. Wickham]]

- Ejemplo: grabar en un fichero y usar /source/
#+begin_src R 
sumSq <- function(x, ...)
    sum(x ^ 2, ...)

sumProd <- function(x, y, ...){
    xs <- sumSq(x, ...)
    ys <- sumSq(y, ...)
    xs * ys
}

sumProd(rnorm(10), letters[1:10])
#+end_src
 
** Analizar antes de que ocurra: =trace=
- =trace= permite mayor control que =debug=
#+begin_src R
trace(sumProd, tracer=browser, exit=browser)
#+end_src
- La función queda modificada
#+begin_src R
sumProd
#+end_src
#+begin_src R
body(sumProd)
#+end_src

** Analizar antes de que ocurra: =trace=
- Los comandos =n= y =c= cambian respecto a =debug=:
  - =c= o intro: avanzar un paso.
  - =n=: continua hasta el final del contexto actual (por ejemplo,
    terminar un bucle).
- Para desactivar
#+begin_src R
untrace(sumProd)
#+end_src

* Profiling
** ¿Cuánto tarda mi función? =system.time=
Defino una función que rellena una matriz de 10^6 filas y =n= columnas con una distribución normal:
#+begin_src R 
makeNoise <- function(n){
    sapply(seq_len(n), function(i) rnorm(1e6))
}
#+end_src

#+begin_src R :cache yes
M <- makeNoise(100)
summary(M)
#+end_src
** Diferentes formas de sumar
=system.time= mide el tiempo de CPU que consume un código[fn:1].

#+begin_src R
system.time({
    suma1 <- numeric(1e6)
    for(i in 1:1e6) suma1[i] <- sum(M[i,])
})
#+end_src

#+begin_src R
system.time(suma2 <- apply(M, 1, sum))
#+end_src

#+begin_src R
system.time(suma3 <- rowSums(M))
#+end_src


** ¿Cuánto tarda cada parte de mi función?: =Rprof=
- Usaremos un fichero temporal
#+begin_src R 
tmp <- tempfile()
#+end_src
- Activamos la toma de información
#+begin_src R 
Rprof(tmp)
#+end_src
- Ejecutamos el código a analizar
#+begin_src R 
suma1 <- numeric(1e6)
for(i in 1:1e6) suma1[i] <- sum(M[i,])

suma2 <- apply(M, 1, FUN = sum)

suma3 <- rowSums(M)
#+end_src
   
** ¿Cuánto tarda cada parte de mi función?: =Rprof=
- Paramos el análisis
#+begin_src R 
Rprof()
#+end_src
- Extraemos el resumen
#+begin_src R 
summaryRprof(tmp)
#+end_src

* Ejercicios
** Áreas de figuras geométricas
 Escribe una función que calcule el área de un círculo, un triángulo o un cuadrado. La función empleará, a su vez, una función diferente definida para cada caso.

** Conversión de temperaturas
  Escribe una función para realizar la conversión de temperaturas. La función trabajará a partir de un valor (número real) y una letra. La letra indica la escala en la que se introduce esa temperatura. Si la letra es 'C', la temperatura se convertirá de grados centígrados a Fahrenheit. Si la letra es 'F' la temperatura se convertirá de grados Fahrenheit a grados Centígrados. 
Se usarán 2 funciones auxiliares, =cent2fahr= y =fahr2cent= para convertir de una escala a otra. Estas funciones aceptan un parámetro (la temperatura en una escala) y devuelven el valor en la otra escala. 

 Nota: La relación entre ambas escalas es $T_F = 9/5 \cdot T_C + 32$

** Tablas de multiplicar
 Construye un programa que muestre por pantalla las tablas de multiplicar del 1 al 10, a partir de dos funciones específicas. La primera función debe devolver el producto de dos valores numéricos enteros dados como parámetros. La segunda función debe mostrar por pantalla la tabla de multiplicar de un número dado como parámetro.

** Números combinatorios

 Escribe una función que calcule y muestre en pantalla el número combinatorio a partir de los valores =n= y =k=.

 \[
 nk = \frac{n!}{(n - k)! \cdot k!}
 \]

 Esta función debe estar construida en base a dos funciones auxiliares, una para calcular el factorial de un número, y otra para calcular el número combinatorio.

** Fibonacci

 Escribe una *función recursiva* que genere los =n= primeros términos de la serie de Fibonacci. Esta función aceptará el número entero =n= como argumento. Este valor debe ser positivo, de forma que si el usuario introduce un valor negativo la función devolverá un error.

 Nota: En la serie de Fibonacci los dos primeros números son 1, y el resto se obtiene sumando los dos anteriores: $1, 1, 2, 3, 5, 8, 13, 21, \ldots$

** Serie de Taylor

  Escribe un conjunto de funciones para calcular la aproximación de $e ^ {-x}$ mediante el desarrollo de Taylor:

  \[
  e^{-x} = 1 + \sum_{i = 1}^\infty \frac{(-x)^n}{n!}
  \]

  La función principal acepta como argumentos el valor del número real =x= y el número de términos deseados. Se basará en otras tres funciones: 

 - =factorial= calcula el factorial de un número entero =n=.

 - =potencia= calcula la potencia =n= de un número real =x=.

 - =exponencial= calcula la aproximación anterior de un número real =x= usando =n= términos de la serie de Taylor. 


* Footnotes

[fn:1] Para entender la diferencia entre =user= y =system= véase explicación [[http://r.789695.n4.nabble.com/Meaning-of-proc-time-tp2303263p2306691.html][aquí]]. 
